{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Money guard app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is documentation of Money guard app"
  },
  "servers": [
    {
      "url": "https://project-devstudents-node-js.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Transactions",
      "description": "Operations about Transactions"
    },
    {
      "name": "Auth",
      "description": "Authentication Operations"
    },
    {
      "name": "User",
      "description": "User Operations"
    }
  ],
  "paths": {
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get list of transactions",
        "operationId": "getTransactions",
        "description": "Get list of all transactions for specific user with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found transactions!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found transactions!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create transaction",
        "operationId": "createTransaction",
        "description": "Create a transaction with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "type",
                  "category",
                  "comment",
                  "sum"
                ],
                "properties": {
                  "date": {
                    "description": "Transaction's created time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-03-21T20:47:45.791Z"
                  },
                  "type": {
                    "description": "Transaction's type",
                    "type": "string",
                    "enum": [
                      "income",
                      "expense"
                    ],
                    "example": "income"
                  },
                  "category": {
                    "description": "Transaction's category",
                    "type": "string",
                    "enum": [
                      "Incomes",
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertainment"
                    ],
                    "example": "Incomes"
                  },
                  "comment": {
                    "description": "Transaction's comment",
                    "type": "string",
                    "example": "Vanish"
                  },
                  "sum": {
                    "description": "Transaction's sum",
                    "type": "number",
                    "example": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/result"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/400"
                    },
                    {
                      "$ref": "#/components/schemas/400invalidIdOrTransaction"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/{id}": {
      "patch": {
        "tags": [
          "Transactions"
        ],
        "summary": "Patch transaction by id",
        "operationId": "patchTransaction",
        "description": "Patch a transaction by id with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "Transaction's created time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-03-21T20:47:45.791Z"
                  },
                  "type": {
                    "description": "Transaction's type",
                    "type": "string",
                    "enum": [
                      "income",
                      "expense"
                    ],
                    "example": "income"
                  },
                  "category": {
                    "description": "Transaction's category",
                    "type": "string",
                    "enum": [
                      "Incomes",
                      "Main expenses",
                      "Products",
                      "Car",
                      "Self care",
                      "Child care",
                      "Household products",
                      "Education",
                      "Leisure",
                      "Other expenses",
                      "Entertainment"
                    ],
                    "example": "Incomes"
                  },
                  "comment": {
                    "description": "Transaction's comment",
                    "type": "string",
                    "example": "Vanish"
                  },
                  "sum": {
                    "description": "Transaction's sum",
                    "type": "number",
                    "example": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Patched a transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/result"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/400invalidIdOrTransaction"
                    },
                    {
                      "$ref": "#/components/schemas/400"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete transaction by id",
        "operationId": "deleteTransaction",
        "description": "Delete transaction by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete transaction by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully delete a transaction!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/result"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400invalidIdOrTransaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/categories": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get list of transactions categories",
        "operationId": "getCategories",
        "description": "Get list of categories for specific type with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "expense"
              ],
              "example": "income",
              "description": "Get list of categories for specific type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully  given a transaction category!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully given a transaction category!"
                    },
                    "data": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Incomes"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "Main expenses",
                              "Products",
                              "Car",
                              "Self care",
                              "Child care",
                              "Household products",
                              "Education",
                              "Leisure",
                              "Other expenses",
                              "Entertainment"
                            ],
                            "example": "Products"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transactions/summary": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get list of transactions in period",
        "operationId": "getTransactionsInPeriod",
        "description": "Get list of transactions in period with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "schema": {
              "type": "number",
              "example": 5
            }
          },
          {
            "in": "query",
            "name": "year",
            "schema": {
              "type": "number",
              "example": 2025
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully find a transactions!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully find a transactions!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "Main expenses",
                        "Products",
                        "Car",
                        "Self care",
                        "Child care",
                        "Household products",
                        "Education",
                        "Leisure",
                        "Other expenses",
                        "Entertainment",
                        "Incomes",
                        "totalExpenses"
                      ],
                      "properties": {
                        "Main expenses": {
                          "type": "number",
                          "example": 130
                        },
                        "Products": {
                          "type": "number",
                          "example": 130
                        },
                        "Car": {
                          "type": "number",
                          "example": 130
                        },
                        "Self care": {
                          "type": "number",
                          "example": 130
                        },
                        "Child care": {
                          "type": "number",
                          "example": 130
                        },
                        "Household products": {
                          "type": "number",
                          "example": 130
                        },
                        "Education": {
                          "type": "number",
                          "example": 130
                        },
                        "Leisure": {
                          "type": "number",
                          "example": 130
                        },
                        "Other expenses": {
                          "type": "number",
                          "example": 130
                        },
                        "Entertainment": {
                          "type": "number",
                          "example": 130
                        },
                        "Incomes": {
                          "type": "number",
                          "example": 130
                        },
                        "totalExpenses": {
                          "type": "number",
                          "example": 130
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "Register user with payload",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "adf@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "home2341"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user and logged in!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/userWithToken"
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=I8pFv8krW8u%2Bj2ZnpsNfRMADUQNCILbg0XLp2lvT;sessionId=j%3A%226807e05ee088a4438345b958%22"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login user with payload",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "adf@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "home2341"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged in an user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "userId"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "/aRQeiCt5ZsUAcwgT6inTkFBVdIQlZ5I16LBdQQo"
                        },
                        "userId": {
                          "type": "string",
                          "example": "65e4decdd286b30065d54af9"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=I8pFv8krW8u%2Bj2ZnpsNfRMADUQNCILbg0XLp2lvT;sessionId=j%3A%226807e05ee088a4438345b958%22"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logout user with cookies",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "logout user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh users session",
        "operationId": "refreshUser",
        "description": "Refresh users session with cookies",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "refreshed user's session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "/aRQeiCt5ZsUAcwgT6inTkFBVdIQlZ5I16LBdQQo"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=I8pFv8krW8u%2Bj2ZnpsNfRMADUQNCILbg0XLp2lvT;sessionId=j%3A%226807e05ee088a4438345b958%22"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user info",
        "operationId": "getCurrentUser",
        "description": "Get current user info with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found user with id=userData",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user with id=${userData._id}"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user/update": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Patch user info",
        "operationId": "updateUser",
        "description": "Patch a user info by id with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "adf@gmail.com"
                  },
                  "avatar": {
                    "description": "User's account avatar",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Patched a User's account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User with id=userData._id updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400invalidIdOrTransaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "refreshToken"
      }
    },
    "schemas": {
      "400": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "BadRequestError"
          },
          "data": {
            "type": "object",
            "required": [
              "message",
              "errors"
            ],
            "properties": {
              "message": {
                "type": "string",
                "example": "Bad Request"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "message",
                    "path",
                    "type",
                    "context"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"requestFieldName\" is required"
                    },
                    "path": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "requestFieldName"
                      }
                    },
                    "type": {
                      "type": "string",
                      "example": "any.required"
                    },
                    "context": {
                      "type": "object",
                      "required": [
                        "label",
                        "key"
                      ],
                      "properties": {
                        "label": {
                          "type": "string",
                          "example": "requestFieldName"
                        },
                        "key": {
                          "type": "string",
                          "example": "requestFieldName"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "transaction": {
        "type": "object",
        "required": [
          "_id",
          "date",
          "type",
          "category",
          "comment",
          "sum",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Transaction's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "date": {
            "description": "Transaction's created time",
            "type": "string",
            "format": "date-time",
            "example": "2025-03-21T20:47:45.791Z"
          },
          "type": {
            "description": "Transaction's type",
            "type": "string",
            "enum": [
              "income",
              "expense"
            ],
            "example": "income"
          },
          "category": {
            "description": "Transaction's category",
            "type": "string",
            "enum": [
              "Incomes",
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertainment"
            ],
            "example": "Incomes"
          },
          "comment": {
            "description": "Transaction's comment",
            "type": "string",
            "example": "Vanish"
          },
          "sum": {
            "description": "Transaction's sum",
            "type": "number",
            "example": 100
          },
          "userId": {
            "description": "Transaction's user id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          }
        }
      },
      "result": {
        "type": "object",
        "required": [
          "transaction",
          "updatedBalance"
        ],
        "properties": {
          "transaction": {
            "type": "object",
            "required": [
              "_id",
              "date",
              "type",
              "category",
              "comment",
              "sum",
              "userId"
            ],
            "properties": {
              "_id": {
                "description": "Transaction's id",
                "type": "string",
                "example": "65e4decdd286b30065d54af9"
              },
              "date": {
                "description": "Transaction's created time",
                "type": "string",
                "format": "date-time",
                "example": "2025-03-21T20:47:45.791Z"
              },
              "type": {
                "description": "Transaction's type",
                "type": "string",
                "enum": [
                  "income",
                  "expense"
                ],
                "example": "income"
              },
              "category": {
                "description": "Transaction's category",
                "type": "string",
                "enum": [
                  "Incomes",
                  "Main expenses",
                  "Products",
                  "Car",
                  "Self care",
                  "Child care",
                  "Household products",
                  "Education",
                  "Leisure",
                  "Other expenses",
                  "Entertainment"
                ],
                "example": "Incomes"
              },
              "comment": {
                "description": "Transaction's comment",
                "type": "string",
                "example": "Vanish"
              },
              "sum": {
                "description": "Transaction's sum",
                "type": "number",
                "example": 100
              },
              "userId": {
                "description": "Transaction's user id",
                "type": "string",
                "example": "65e4decdd286b30065d54af9"
              }
            }
          },
          "updatedBalance": {
            "description": "Users updated balance",
            "type": "number",
            "example": 1001
          }
        }
      },
      "400invalidIdOrTransaction": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": {
              "oneOf": [
                "Bad Request",
                "Only image files are allowed",
                "File extension .extension is not allowed. Use: allowedExtensions",
                "file with .exe extention not allow"
              ]
            }
          }
        }
      },
      "userWithToken": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "balance",
          "avatar",
          "accessToken"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "adf@gmail.com"
          },
          "balance": {
            "description": "User's balance",
            "type": "number",
            "example": 12900
          },
          "avatar": {
            "description": "User's account avatar",
            "type": "string",
            "format": "url",
            "example": "https://res.cloudinary/dfgh/image/upload/v15egdjyg/uyhkuyh.jpg"
          },
          "accessToken": {
            "description": "User's account access token",
            "type": "string",
            "example": "/aRQeiCt5ZsUAcwgT6inTkFBVdIQlZ5I16LBdQQo"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "balance",
          "avatar",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "adf@gmail.com"
          },
          "balance": {
            "description": "User's balance",
            "type": "number",
            "example": 12900
          },
          "avatar": {
            "description": "User's account avatar",
            "type": "object",
            "required": [
              "url",
              "public_id"
            ],
            "properties": {
              "url": {
                "type": "string",
                "format": "url",
                "example": "https://res.cloudinary/dfgh/image/upload/v15egdjyg/uyhkuyh.jpg"
              },
              "public_id": {
                "type": "string",
                "example": "default-avatar"
              }
            }
          },
          "createdAt": {
            "description": "User's account created time",
            "type": "string",
            "format": "date-time",
            "example": "2025-03-21T20:47:45.791Z"
          },
          "updatedAt": {
            "description": "User's account updated time",
            "type": "string",
            "format": "date-time",
            "example": "2025-03-21T20:47:45.791Z"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": {
                    "oneOf": [
                      "Auth header should be of type Bearer",
                      "Session not found",
                      "Session token expired"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": {
                    "oneOf": [
                      "Transaction not found",
                      "User not found",
                      "Session not found",
                      "User with id=userData._id not found"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email in use"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": {
                    "oneOf": [
                      "Something went wrong",
                      "Failed to update user"
                    ]
                  }
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}